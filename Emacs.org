* Some sane defaults

  Lets turn off some ui-parts that gets in the way
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) 

  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
#+end_src

Lets have a visible bell instead of a beep
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

Use escape as C=g
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

* Diminish
  
  Diminish provides the :diminish keyword for use-package, which tells Emacs to not report the minor-mode supplied by the package.
  #+begin_src emacs-lisp
    (use-package diminish)
  #+end_src
  
* Visuals

  #+begin_src emacs-lisp
    ;; Line numbering
    (column-number-mode)
    (global-display-line-numbers-mode t)
    ;;disable line numbers for some modes
    (dolist (mode '(org-mode-hook
		    term-mode-hook
		    shell-mode-hook
		    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

    ;; Font
    (set-face-attribute 'default nil :font "Fira Code Retina" :height 100)

    ;; Theming
    (use-package doom-themes
      :init
      (load-theme 'doom-palenight t))

    ;; Rainbow delimiters
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))

    (use-package all-the-icons
      :if (display-graphic-p)
      :commands all-the-icons-install-fonts
      :init
      (unless (find-font (font-spec :name "all-the-icons"))
	(all-the-icons-install-fonts t)))

    (use-package all-the-icons-dired
      :if (display-graphic-p)
      :hook (dired-mode . all-the-icons-dired-mode))

    ;; Doom modeline
    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)
      :custom ((doom-modeline-height 15)))
#+end_src

* Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
#+end_src

* Ivy and Counsel

  #+begin_src emacs-lisp
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

    (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)



    (use-package counsel
      :bind (("M-x" . counsel-M-x)
	     ("C-x b" . counsel-ibuffer)
	     ("C-x C-f" . counsel-find-file)
	     :map minibuffer-local-map
	     ("C-r" . 'counsel-minibuffer-history))
      :config
      (setq ivy-initial-inputs-alist nil))

    (use-package ivy-rich
      :init
      (ivy-rich-mode 1))
  #+end_src

* Which-key

  #+begin_src emacs-lisp
    (use-package which-key
      :init (which-key-mode)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0.3))
  #+end_src
  
* Helpful

  #+begin_src emacs-lisp
    (use-package helpful
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
  #+end_src
  
* Evil

  #+begin_src emacs-lisp
    (defun 0x4d/evil-hook ()
      (dolist (mode '(custom-mode
		      eshell-mode
		      erc-mode
		      term-mode))
	(add-to-list 'evil-emacs-state-modes mode)))

    (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
    ;  :hook (evil-mode . 0x4d/evil-hook)
      :config
      (evil-mode 1)
      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
      (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal))

    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))
  #+end_src
  
* General

  #+begin_src emacs-lisp
    (use-package general
      :config
      (general-create-definer 0x4d/leader-keys
	:keymaps '(normal insert visual emacs)
	:prefix "SPC"
	:global-prefix "C-SPC")

      (0x4d/leader-keys
       "t" '(:ignore t : which-key "toggles")
       "lt" '(counsel-load-theme :which-key "choose theme")
       "ts" '(hydra-text-scale/body :which-key "scale text")))

    (general-define-key
     "C-M-j" 'counsel-switch-buffer)
  #+end_src
  
* Hydra

  #+begin_src emacs-lisp
    (use-package hydra)

    (defhydra hydra-text-scale (:timeout 4)
      "scale text"
      ("j" text-scale-increase "in")
      ("k" text-scale-decrease "out")
      ("f" nil "finished" :exit t))
  #+end_src
  
* Projectile

  #+begin_src emacs-lisp
    (use-package projectile
      :diminish projectile-mode
      :config (projectile-mode)
      :custom ((projectile-completion-system 'ivy))
      :bind-keymap
      ("C-c p" . projectile-command-map)
      :init
      (when (file-directory-p "~/Projects/Code")
	(setq projectile-project-search-path '("~/Projects/Code")))
      (setq projectile-switch-project-action #'projectile-dired))

    (use-package counsel-projectile
      :config (counsel-projectile-mode))
  #+end_src
  
* Magit

  #+begin_src emacs-lisp
    (use-package magit
      :commands (magit-status magit-get-current-branch)
      :custom
      (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

    (use-package evil-magit
      :after magit)

    ;;(use-package forge)
  #+end_src
  
* Org

  #+begin_src emacs-lisp
    (defun 0x4d/org-mode-setup ()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (auto-fill-mode 0)
      (visual-line-mode 1)
      (setq evil-auto-indent nil))

    (use-package org
      :hook (org-mode . 0x4d/org-mode-setup)
      :config
      (setq org-ellipsis " î—…"))

    (require 'org-tempo)

    (use-package org-bullets
      :after org
      :hook (org-mode . org-bullets-mode))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (C . t)
       (lisp . t)
       (python . t)
       (shell . t)
       ))

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("cpp" . "src cpp"))
    #+end_src

* Programming
** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (cc-mode . lsp)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))
#+end_src

* EXWM
Stolen EXWM-config
#+begin_src emacs-lisp
    (defvar 0x4d/frame-transparency '(90 . 90))
    (set-frame-parameter (selected-frame) 'alpha 0x4d/frame-transparency)
    (add-to-list 'default-frame-alist `(alpha . ,0x4d/frame-transparency))
    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
    (defun 0x4d/exwm-update-class ()
      (exwm-workspace-rename-buffer exwm-class-name))

    (use-package exwm
      :config
      ;; Set the default number of workspaces
      (setq exwm-workspace-number 5)

      ;; When window "class" updates, use it to set the buffer name
      (add-hook 'exwm-update-class-hook #'0x4d/exwm-update-class)

      ;; Rebind CapsLock to Ctrl
      (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

      ;; Wallpaper
      (start-process-shell-command "feh" nil "feh --bg-max ~/wallpaper.jpg")
      (start-process-shell-command "compton" nil "compton")


      ;; Set the screen resolution (update this to be the correct resolution for your screen!)
      (require 'exwm-randr)
      (exwm-randr-enable)
      ;; (start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal")

      ;; Load the system tray before exwm-init
      (require 'exwm-systemtray)
      (exwm-systemtray-enable)

      ;; These keys should always pass through to Emacs
      (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:
          ?\C-\M-j  ;; Buffer list
          ?\C-\ ))  ;; Ctrl+Space

      ;; Ctrl+Q will enable the next key to be sent directly
      (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

      ;; Set up global key bindings.  These always work, no matter the input state!
      ;; Keep in mind that changing this list after EXWM initializes has no effect.
      (setq exwm-input-global-keys
            `(
              ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
              ([?\s-r] . exwm-reset)

              ;; Move between windows
              ([s-left] . windmove-left)
              ([s-right] . windmove-right)
              ([s-up] . windmove-up)
              ([s-down] . windmove-down)

              ;; Launch applications via shell command
              ([?\s-&] . (lambda (command)
                           (interactive (list (read-shell-command "$ ")))
                           (start-process-shell-command command nil command)))

              ;; Switch workspace
              ([?\s-w] . exwm-workspace-switch)
              ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

              ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
              ,@(mapcar (lambda (i)
                          `(,(kbd (format "s-%d" i)) .
                            (lambda ()
                              (interactive)
                              (exwm-workspace-switch-create ,i))))
                        (number-sequence 0 9))))

      (exwm-enable))
#+end_src
